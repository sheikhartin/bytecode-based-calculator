package main

import (
	"bufio"
	"flag"
	"fmt"
	"os"

	"github.com/sheikhartin/bytecode-based-calculator/pkg/interpreter"
	"github.com/sheikhartin/bytecode-based-calculator/pkg/parser"
)

func main() {
	lexerFlag := flag.Bool("l", false, "Display lexer output")
	parserFlag := flag.Bool("p", false, "Display parser output")
	generatorFlag := flag.Bool("g", false, "Display generated bytecodes")
	flag.Parse()

	vm := interpreter.NewVM()
	scanner := bufio.NewScanner(os.Stdin)

	for {
		fmt.Print("@> ")
		scanner.Scan()
		input := scanner.Text()
		if input == "" {
			continue
		}

		l, err := parser.NewLexer(input)
		if err != nil {
			fmt.Println(err)
			continue
		}
		if *lexerFlag {
			fmt.Println("Tokenizing input...")
			fmt.Println(l)
		}

		p, err := parser.NewParser(l.Tokens)
		if err != nil {
			fmt.Println(err)
			continue
		}
		if *parserFlag {
			fmt.Println("Analyzing syntax...")
			fmt.Println(p)
		}

		g := parser.NewBytecodeGenerator(p.Nodes)
		if *generatorFlag {
			fmt.Println("Compiling instructions...")
			fmt.Println(g)
		}

		vm.Execute(g.Bytecode)
		if err != nil {
			fmt.Println(err)
			continue
		}
		fmt.Println(vm)
	}
}
